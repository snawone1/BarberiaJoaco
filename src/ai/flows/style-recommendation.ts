// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview Provides AI-driven style recommendations based on user input regarding hair type, face shape, and preferences.
 *
 * - getStyleRecommendation - A function that takes user preferences and returns a haircut recommendation.
 * - StyleRecommendationInput - The input type for the getStyleRecommendation function.
 * - StyleRecommendationOutput - The return type for the getStyleRecommendation function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const StyleRecommendationInputSchema = z.object({
  hairType: z
    .string()
    .describe('The user’s hair type (e.g., straight, wavy, curly, coily).'),
  faceShape: z
    .string()
    .describe('The user’s face shape (e.g., round, oval, square, heart).'),
  stylePreferences: z
    .string()
    .describe('The user’s style preferences (e.g., modern, classic, edgy).'),
});
export type StyleRecommendationInput = z.infer<typeof StyleRecommendationInputSchema>;

const StyleRecommendationOutputSchema = z.object({
  recommendation: z
    .string()
    .describe('A detailed haircut recommendation based on the user’s input.'),
  reasoning: z
    .string()
    .describe('Explanation of why the recommendation is appropriate for the given input.'),
});
export type StyleRecommendationOutput = z.infer<typeof StyleRecommendationOutputSchema>;

export async function getStyleRecommendation(
  input: StyleRecommendationInput
): Promise<StyleRecommendationOutput> {
  return styleRecommendationFlow(input);
}

const prompt = ai.definePrompt({
  name: 'styleRecommendationPrompt',
  input: {schema: StyleRecommendationInputSchema},
  output: {schema: StyleRecommendationOutputSchema},
  prompt: `You are a professional barber, expert in recommending the best haircut for a customer.

  Based on the the customer's hair type, face shape, and style preferences, provide a detailed haircut recommendation and explain your reasoning.

  Hair Type: {{{hairType}}}
  Face Shape: {{{faceShape}}}
  Style Preferences: {{{stylePreferences}}}
  `,
});

const styleRecommendationFlow = ai.defineFlow(
  {
    name: 'styleRecommendationFlow',
    inputSchema: StyleRecommendationInputSchema,
    outputSchema: StyleRecommendationOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
