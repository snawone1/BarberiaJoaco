{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/style-recommendation-with-services.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview An AI agent that provides style recommendations based on user input and considers available barbershop services.\n *\n * - getStyleRecommendationWithServices - A function that provides style recommendations considering barbershop services.\n * - StyleRecommendationWithServicesInput - The input type for the getStyleRecommendationWithServices function.\n * - StyleRecommendationWithServicesOutput - The return type for the getStyleRecommendationWithServices function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst StyleRecommendationWithServicesInputSchema = z.object({\n  hairType: z.string().describe('The user\\'s hair type (e.g., curly, straight, wavy).'),\n  faceShape: z.string().describe('The user\\'s face shape (e.g., oval, square, round).'),\n  preferences: z.string().describe('The user\\'s style preferences and desired look.'),\n});\nexport type StyleRecommendationWithServicesInput = z.infer<typeof StyleRecommendationWithServicesInputSchema>;\n\nconst StyleRecommendationWithServicesOutputSchema = z.object({\n  styleRecommendation: z.string().describe('A detailed style recommendation based on the user input.'),\n  relevantServices: z.array(z.string()).describe('A list of barbershop services that would be helpful in achieving the recommended style.'),\n});\nexport type StyleRecommendationWithServicesOutput = z.infer<typeof StyleRecommendationWithServicesOutputSchema>;\n\nexport async function getStyleRecommendationWithServices(input: StyleRecommendationWithServicesInput): Promise<StyleRecommendationWithServicesOutput> {\n  return styleRecommendationWithServicesFlow(input);\n}\n\nconst barbershopServices = [\n  'Haircut', \n  'Beard Trim',\n  'Coloring', \n  'Highlights', \n  'Perm',\n  'Straightening',\n  'Scalp Treatment'\n];\n\nconst checkServiceRelevanceTool = ai.defineTool({\n  name: 'checkServiceRelevance',\n  description: 'Determines whether a barbershop service is relevant to achieving a specific hairstyle or look.',\n  inputSchema: z.object({\n    styleRecommendation: z.string().describe('The style recommendation being made to the user.'),\n    service: z.string().describe('A specific barbershop service to evaluate for relevance.'),\n  }),\n  outputSchema: z.boolean().describe('Whether the barbershop service is relevant to the style recommendation.'),\n}, async (input) => {\n  // Basic implementation - can be extended with more sophisticated logic.\n  // This simple implementation checks if the service is mentioned in the style recommendation.\n  return input.styleRecommendation.toLowerCase().includes(input.service.toLowerCase());\n});\n\nconst styleRecommendationPrompt = ai.definePrompt({\n  name: 'styleRecommendationPrompt',\n  input: {schema: StyleRecommendationWithServicesInputSchema},\n  output: {schema: StyleRecommendationWithServicesOutputSchema},\n  tools: [checkServiceRelevanceTool],\n  prompt: `You are a professional style advisor at a barbershop. Based on the user's hair type, face shape, and preferences, provide a style recommendation.\n\nHair Type: {{{hairType}}}\nFace Shape: {{{faceShape}}}\nPreferences: {{{preferences}}}\n\nConsider if any of the following services available at the barbershop might be helpful in achieving this style:\n${barbershopServices.join(', ')}\n\nUse the checkServiceRelevance tool to determine if any of the barbershop's services would be helpful in achieving the recommended style. If a service is deemed relevant by the tool, mention it explicitly in the styleRecommendation output field.\n`,\n});\n\nconst styleRecommendationWithServicesFlow = ai.defineFlow(\n  {\n    name: 'styleRecommendationWithServicesFlow',\n    inputSchema: StyleRecommendationWithServicesInputSchema,\n    outputSchema: StyleRecommendationWithServicesOutputSchema,\n  },\n  async input => {\n    const {output} = await styleRecommendationPrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AACA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,6CAA6C,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1D,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC/B,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACnC;AAGA,MAAM,8CAA8C,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC3D,qBAAqB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACzC,kBAAkB,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IAAI,QAAQ,CAAC;AACjD;AAGO,eAAe,uCAAgC,GAAhC,mCAAmC,KAA2C;IAClG,OAAO,oCAAoC;AAC7C;AAEA,MAAM,qBAAqB;IACzB;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAED,MAAM,4BAA4B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAAC;IAC9C,MAAM;IACN,aAAa;IACb,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACpB,qBAAqB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QACzC,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC/B;IACA,cAAc,uIAAA,CAAA,IAAC,CAAC,OAAO,GAAG,QAAQ,CAAC;AACrC,GAAG,OAAO;IACR,wEAAwE;IACxE,6FAA6F;IAC7F,OAAO,MAAM,mBAAmB,CAAC,WAAW,GAAG,QAAQ,CAAC,MAAM,OAAO,CAAC,WAAW;AACnF;AAEA,MAAM,4BAA4B,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAChD,MAAM;IACN,OAAO;QAAC,QAAQ;IAA0C;IAC1D,QAAQ;QAAC,QAAQ;IAA2C;IAC5D,OAAO;QAAC;KAA0B;IAClC,QAAQ,CAAC;;;;;;;AAOX,EAAE,mBAAmB,IAAI,CAAC,MAAM;;;AAGhC,CAAC;AACD;AAEA,MAAM,sCAAsC,mHAAA,CAAA,KAAE,CAAC,UAAU,CACvD;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,0BAA0B;IACjD,OAAO;AACT;;;IAvDoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 331, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["\n'use server';\n\nimport type { AppointmentFormValues, SiteSettingsFormValues, StyleAdvisorFormValues, ProductFormValues } from '@/lib/schemas';\nimport { getStyleRecommendationWithServices } from '@/ai/flows/style-recommendation-with-services';\nimport type { Product } from '@/app/products/page'; // Product type is still fine to import\nimport { revalidatePath } from 'next/cache';\n\n// Define initial productsData here - now empty\nconst initialProductsData: Product[] = [];\n\n\nexport async function submitAppointmentRequest(data: AppointmentFormValues) {\n  // In a real app, you'd save this to a database or send an email.\n  console.log('Appointment Request Received:', data);\n\n  // Simulate API delay\n  await new Promise(resolve => setTimeout(resolve, 1000));\n\n  // Simulate success/failure\n  if (data.name.toLowerCase() === \"error\") {\n    return { success: false, message: 'Failed to submit appointment. Please try again.' };\n  }\n  return { success: true, message: 'Appointment request sent successfully! We will contact you shortly to confirm.' };\n}\n\nexport async function getAIStyleAdvice(data: StyleAdvisorFormValues) {\n  try {\n    const recommendation = await getStyleRecommendationWithServices({\n      hairType: data.hairType,\n      faceShape: data.faceShape,\n      preferences: data.stylePreferences,\n    });\n    return { success: true, data: recommendation };\n  } catch (error) {\n    console.error('Error getting AI style advice:', error);\n    return { success: false, message: 'Failed to get style advice. Please try again later.' };\n  }\n}\n\nexport async function submitSiteSettings(data: SiteSettingsFormValues) {\n  console.log('Site Settings Update Received:', data);\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  return { success: true, message: '¡Configuración del sitio guardada con éxito! (Simulado)' };\n}\n\n// Product Management Actions (Simulated)\nlet currentProducts: Product[] = [...initialProductsData]; // In-memory store for simulation\n\nexport async function getProducts(): Promise<Product[]> {\n  // Simulate API delay\n  await new Promise(resolve => setTimeout(resolve, 500));\n  // console.log('Server: Returning products from getProducts:', currentProducts);\n  return currentProducts;\n}\n\nexport async function addProduct(data: ProductFormValues) {\n  console.log('Adding Product (Simulated):', data);\n  const newProduct: Product = {\n    ...data,\n    id: data.id || `prod-${Date.now()}-${Math.random().toString(36).substring(2, 7)}`, // Generate ID if not present\n  };\n  currentProducts.push(newProduct); // Add to in-memory store\n  // console.log('Server: currentProducts after add:', currentProducts);\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  \n  revalidatePath('/products'); // Revalidate the products page\n  revalidatePath('/admin');     // Revalidate the admin page (if it displays product list directly)\n  \n  return { success: true, message: 'Producto añadido con éxito (Simulado).', product: newProduct };\n}\n\nexport async function deleteProduct(productId: string) {\n  console.log('Deleting Product (Simulated):', productId);\n  currentProducts = currentProducts.filter(p => p.id !== productId); // Remove from in-memory store\n  // console.log('Server: currentProducts after delete:', currentProducts);\n  await new Promise(resolve => setTimeout(resolve, 1000));\n\n  revalidatePath('/products'); // Revalidate the products page\n  revalidatePath('/admin');     // Revalidate the admin page\n  \n  return { success: true, message: 'Producto eliminado con éxito (Simulado).' };\n}\n\n"],"names":[],"mappings":";;;;;;;;;;AAIA;AAEA;;;;;;AAEA,+CAA+C;AAC/C,MAAM,sBAAiC,EAAE;AAGlC,eAAe,uCAAsB,GAAtB,yBAAyB,IAA2B;IACxE,iEAAiE;IACjE,QAAQ,GAAG,CAAC,iCAAiC;IAE7C,qBAAqB;IACrB,MAAM,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS;IAEjD,2BAA2B;IAC3B,IAAI,KAAK,IAAI,CAAC,WAAW,OAAO,SAAS;QACvC,OAAO;YAAE,SAAS;YAAO,SAAS;QAAkD;IACtF;IACA,OAAO;QAAE,SAAS;QAAM,SAAS;IAAiF;AACpH;AAEO,eAAe,uCAAc,GAAd,iBAAiB,IAA4B;IACjE,IAAI;QACF,MAAM,iBAAiB,MAAM,CAAA,GAAA,iKAAA,CAAA,qCAAkC,AAAD,EAAE;YAC9D,UAAU,KAAK,QAAQ;YACvB,WAAW,KAAK,SAAS;YACzB,aAAa,KAAK,gBAAgB;QACpC;QACA,OAAO;YAAE,SAAS;YAAM,MAAM;QAAe;IAC/C,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kCAAkC;QAChD,OAAO;YAAE,SAAS;YAAO,SAAS;QAAsD;IAC1F;AACF;AAEO,eAAe,uCAAgB,GAAhB,mBAAmB,IAA4B;IACnE,QAAQ,GAAG,CAAC,kCAAkC;IAC9C,MAAM,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS;IACjD,OAAO;QAAE,SAAS;QAAM,SAAS;IAA0D;AAC7F;AAEA,yCAAyC;AACzC,IAAI,kBAA6B;OAAI;CAAoB,EAAE,iCAAiC;AAErF,eAAe,uCAAS,GAAT;IACpB,qBAAqB;IACrB,MAAM,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS;IACjD,gFAAgF;IAChF,OAAO;AACT;AAEO,eAAe,uCAAQ,GAAR,WAAW,IAAuB;IACtD,QAAQ,GAAG,CAAC,+BAA+B;IAC3C,MAAM,aAAsB;QAC1B,GAAG,IAAI;QACP,IAAI,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,KAAK,GAAG,GAAG,CAAC,EAAE,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,SAAS,CAAC,GAAG,IAAI;IACnF;IACA,gBAAgB,IAAI,CAAC,aAAa,yBAAyB;IAC3D,sEAAsE;IACtE,MAAM,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS;IAEjD,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE,cAAc,+BAA+B;IAC5D,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE,WAAe,mEAAmE;IAEjG,OAAO;QAAE,SAAS;QAAM,SAAS;QAA0C,SAAS;IAAW;AACjG;AAEO,eAAe,uCAAW,GAAX,cAAc,SAAiB;IACnD,QAAQ,GAAG,CAAC,iCAAiC;IAC7C,kBAAkB,gBAAgB,MAAM,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK,YAAY,8BAA8B;IACjG,yEAAyE;IACzE,MAAM,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS;IAEjD,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE,cAAc,+BAA+B;IAC5D,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE,WAAe,4BAA4B;IAE1D,OAAO;QAAE,SAAS;QAAM,SAAS;IAA2C;AAC9E;;;IAtEsB;IAcA;IAcA;IASA;IAOA;IAgBA;;AA5DA,+OAAA;AAcA,+OAAA;AAcA,+OAAA;AASA,+OAAA;AAOA,+OAAA;AAgBA,+OAAA","debugId":null}},
    {"offset": {"line": 454, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 520, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/admin/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/admin/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA0R,GACvT,wDACA","debugId":null}},
    {"offset": {"line": 534, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/admin/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/admin/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAsQ,GACnS,oCACA","debugId":null}},
    {"offset": {"line": 548, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}